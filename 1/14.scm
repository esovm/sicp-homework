; Exercise 1.14.  Draw the tree illustrating the process generated by the count-change procedure of section 1.2.2 in making change for 11 cents. What are the orders of growth of the space and number of steps used by this process as the amount to be changed increases?

(load "ch1_common.scm")

(define (count-change amount)
  (cc amount 5))

(define (cc amount kinds-of-coins)
  (cond ((= amount 0) 1)
        ((or (< amount 0) (= kinds-of-coins 0)) 0)
        (else (+ (cc amount
                     (- kinds-of-coins 1))
                 (cc (- amount
                        (first-denomination kinds-of-coins))
                     kinds-of-coins)))))

(define (first-denomination kinds-of-coins)
  (cond ((= kinds-of-coins 1) 1)
        ((= kinds-of-coins 2) 5)
        ((= kinds-of-coins 3) 10)
        ((= kinds-of-coins 4) 25)
        ((= kinds-of-coins 5) 50)))

; here we can see that for n > 0 expression (cc n 1) always returns 1.
; indeed, there's only one way to make change for n cents with 1 cent coins, and it's n coins.
; it can be used for simplifying analysis.

(assert (count-change 11) 4)
; (cc 11 5)
; (11 5) -- for brevity
; (11 4) (-39 5)->0
; (11 3) (-14 4)->0
; (11 2)                                                           xx (1 3)
; (11 1)               xx (6 2)                                    xx (1 2) (-9 3)->0
; (11 0)->0 (10 1)     xx (6 1)              xx (1 2)              xx (1 1) (-4 2)->0
; (10 0)->0 ( 9 1)     xx (6 0)->0 (5 1)     xx (1 1) (-4 2)-> 0   xx (1 0)->0 (0 1)->1
; ( 9 0)->0 ( 8 1)     xx (5 0)->0 (4 1)     xx (1 0)->0 (0 1)-> 1 xx 1!
; ( 8 0)->0 ( 7 1)     xx (4 0)->0 (3 1)     xx 1!
; ( 7 0)->0 ( 6 1)     xx (3 0)->0 (2 1)
; ( 6 0)->0 ( 5 1)     xx (2 0)->0 (1 1)
; ( 5 0)->0 ( 4 1)     xx (1 0)->0 (0 1)->1
; ( 4 0)->0 ( 3 1)     xx 1!
; ( 3 0)->0 ( 2 1)
; ( 2 0)->0 ( 1 1)
; ( 1 0)->0 ( 0 1)->1
; 1!

; 1 + 1 + 2 = 4

; Longest path depends on n lineary: as we can see, it has length (amount + kinds-of-coins). During the execution we should get down from (cc 11 5) to 1 first, and then get back accumulating results. Space complexity -- O(n).

; TODO: Other people say that time complexity is O(n^5). Sadly enough, I don't get it :( I can say only that complexity is at least O(n).
