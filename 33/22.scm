; Exercise 3.22.  Instead of representing a queue as a pair of pointers, we can build a queue as a procedure with local state. The local state will consist of pointers to the beginning and the end of an ordinary list. Thus, the make-queue procedure will have the form <...>. Complete the definition of make-queue and provide implementations of the queue operations using this representation.

(load "ch33_common.scm")

(define (make-queue)
  (let ((front-ptr nil)
        (rear-ptr nil))
    (define (empty-queue?)
      (null? front-ptr))
    (define (front-queue)
      (if (empty-queue?)
	  (error "FRONT called with an empty queue")
	  (car front-ptr)))
    (define (insert-queue! item)
      (let ((new-pair (cons item nil)))
	(if (empty-queue?)
	    (set! front-ptr new-pair)
	    (set-cdr! rear-ptr new-pair))
	(set! rear-ptr new-pair)
	#t))
    (define (delete-queue!)
      (if (empty-queue?)
	  (error "DELETE! called with an empty queue")
	  (begin (set! front-ptr (cdr front-ptr))
		 #t)))
    (define (dispatch m)
      (cond ((eq? m 'empty-queue?) (empty-queue?))
	    ((eq? m 'front-queue) (front-queue))
	    ((eq? m 'insert-queue!) insert-queue!)
	    ((eq? m 'delete-queue!) (delete-queue!))
	    (else (error "Undefined operation -- MAKE-QUEUE" m))))
    dispatch))

(define (empty-queue? queue)
  (queue 'empty-queue?))

(define (front-queue queue)
  (queue 'front-queue))

(define (insert-queue! queue item)
  ((queue 'insert-queue!) item))

(define (delete-queue! queue)
  (queue 'delete-queue!))

(define q1 (make-queue))
(assert (insert-queue! q1 'a) #t)
(assert (insert-queue! q1 'b) #t)
(assert (empty-queue? q1) #f)
(assert (front-queue q1) 'a)
(assert (delete-queue! q1) #t)
(assert (front-queue q1) 'b)
(assert (delete-queue! q1) #t)
(assert (empty-queue? q1) #t)
